#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path("../../lib", __FILE__))
require "bundler/setup"
require 'logger'
require 'rdf/normalize'
require_relative "../spec/spec_helper"
require_relative "../spec/suite_helper"
require 'getoptlong'

ASSERTOR = "https://greggkellogg.net/foaf#me"
RUN_TIME = Time.now

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap.ttl", __FILE__))
  options[:output].puts %(
<https://rubygems.org/gems/rdf-normalize> doap:release [
  doap:name "rdf-normalize-#{RDF::Normalize::VERSION}";
  doap:revision "#{RDF::Normalize::VERSION}";
  doap:created "#{File.mtime(File.expand_path('../../VERSION', __FILE__)).strftime('%Y-%m-%d')}"^^xsd:date;
] .
<> foaf:primaryTopic <https://rubygems.org/gems/rdf-normalize> ;
  dc:issued "#{RUN_TIME.xmlschema}"^^xsd:dateTime ;
  foaf:maker <#{ASSERTOR}> .

<#{ASSERTOR}> a foaf:Person, earl:Assertor;
  foaf:name "Gregg Kellogg";
  foaf:title "Implementor";
  foaf:homepage <https://greggkellogg.net/> .
)
end

def run_tc(tc, **options)
  $stderr.write "run #{tc.id}"

  if options[:verbose]
    puts "\nTestCase: #{tc.inspect}"
    puts "\nInput:\n" + tc.input 
    puts "\nExpected:\n" + tc.expected
  end

  output, result = nil, nil

  begin
    puts "open #{tc.action}" if options[:verbose]
    options = {base_uri:  tc.base}.merge(options)

    dataset = RDF::Repository.load(tc.action, format: :nquads)
    output = dataset.dump(:normalize, **tc.writer_options.merge(logger: options[:logger]))

    result = output == tc.expected ? "passed" : "failed"
    options[:results][result] ||= 0
    options[:results][result] += 1
  rescue Interrupt
    $stderr.puts "(interrupt)"
    exit 1
  rescue StandardError => e
    $stderr.puts "#{"exception:" unless options[:quiet]}: #{e}"
    if options[:quiet]
      options[:results]['failed'] ||= 0
      options[:results]['failed'] += 1
    else
      raise
    end
  end

  options[:output].puts("\nOutput:\n" + output) if options[:verbose]

  if options[:earl]
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <https://rubygems.org/gems/rdf-normalize>;
  earl:test <#{tc.id}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  puts "#{" test result:" unless options[:quiet]} #{result}"
end

logger = Logger.new(STDERR)
logger.level = Logger::WARN
logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity}: #{msg}\n"}

options = {
  output:  STDOUT,
  results: {},
  logger: logger
}

opts = GetoptLong.new(
  ["--help", "-?", GetoptLong::NO_ARGUMENT],
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--earl", GetoptLong::NO_ARGUMENT],
  ["--quiet", "-q", GetoptLong::NO_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--validate", GetoptLong::NO_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT]
)

def help(options)
  puts "Usage: #{$0} [options] [test-number ...]"
  puts "Options:"
  puts "      --debug:              Display detailed debug output"
  puts "      --earl:               Generate EARL report"
  puts "      --quiet:              Minimal output"
  puts "      --output:             Output to specified file"
  puts "      --validate:           Validate input"
  puts "      --verbose:            Verbose processing"
  puts "      --help,-?:            This message"
  exit(0)
end

opts.each do |opt, arg|
  case opt
  when '--help'             then help(options)
  when '--debug'            then logger.level = Logger::DEBUG
  when '--earl'
    options[:quiet] = options[:earl] = true
    logger.level = Logger::FATAL
  when '--output'           then options[:output] = File.open(arg, "w")
  when '--quiet'
    options[:quiet] = true
    logger.level = Logger::FATAL
  when '--validate'         then options[:validate] = true
  when '--verbose'          then options[:verbose] = true
  end
end

earl_preamble(options) if options[:earl]

%w(urgna2012 urdna2015).each do |variant|
  manifest = Fixtures::SuiteTest::BASE + "manifest-#{variant}.jsonld"
  
  Fixtures::SuiteTest::Manifest.open(manifest, manifest[0..-8]) do |m|
    m.entries.each do |tc|
      next unless ARGV.empty? || ARGV.any? {|n| tc.id.match(/#{n}/)}
      run_tc(tc, **options)
    end
  end
end

options[:results].each {|k, v| puts "#{k}: #{v}"}
